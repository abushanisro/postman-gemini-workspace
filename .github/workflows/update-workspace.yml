name: Update Gemini Workspace

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  update-collections:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Gemini API for updates
        id: check-updates
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Checking for Gemini API updates..."
          node scripts/check-api-updates.js > update-report.json

          # Check if updates were found
          if [ -s update-report.json ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "Updates found:"
            cat update-report.json
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
            echo "No updates found"
          fi

      - name: Update collections and environments
        if: steps.check-updates.outputs.updates_available == 'true' || github.event.inputs.force_update == true
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Updating workspace components..."
          node scripts/update-workspace.js

      - name: Validate updated collections
        if: steps.check-updates.outputs.updates_available == 'true' || github.event.inputs.force_update == true
        run: |
          echo "Validating updated collections..."
          npm run validate

      - name: Run tests against updated collections
        if: steps.check-updates.outputs.updates_available == 'true' || github.event.inputs.force_update == true
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Testing updated collections..."
          npm run test

      - name: Generate documentation
        if: steps.check-updates.outputs.updates_available == 'true' || github.event.inputs.force_update == true
        run: |
          echo "Updating documentation..."
          node scripts/generate-docs.js

      - name: Check for changes
        id: check-changes
        run: |
          git diff --exit-code --quiet || echo "changes_detected=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check-changes.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update Gemini API workspace

            - Updated collections with latest API changes
            - Refreshed environment configurations
            - Updated documentation

            Auto-generated by GitHub Actions
          title: 'chore: Update Gemini API workspace'
          body: |
            ## Automated Workspace Update

            This PR contains automated updates to the Gemini API Postman workspace.

            ### Changes included:
            - Updated API collections with latest endpoints
            - Refreshed model configurations
            - Updated environment variables
            - Regenerated documentation
            - Validated all collections
            - Ran comprehensive tests

            ### Update Report
            ```json
            $(cat update-report.json 2>/dev/null || echo "{}")
            ```

            ### Next Steps
            1. Review the changes in this PR
            2. Test the updated collections locally if needed
            3. Merge when satisfied with the updates

            ---

            This PR was created automatically by the workspace maintenance workflow.
          branch: chore/update-workspace-${{ github.run_number }}
          delete-branch: true
          reviewers: |
            # Add your GitHub usernames here for automatic review assignment
            # username1
            # username2

      - name: Post update summary
        if: always()
        run: |
          echo "## Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Updates Available**: ${{ steps.check-updates.outputs.updates_available }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Detected**: ${{ steps.check-changes.outputs.changes_detected }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

          if [ -f update-report.json ]; then
            echo "- **Update Report**: See job logs for details" >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Validate environment files
        run: |
          echo "Checking for hardcoded secrets in environment files..."
          node scripts/security-scan.js

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Running performance benchmarks..."
          node scripts/performance-benchmark.js > benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

      - name: Comment benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));

            const comment = `## Performance Benchmark Results

            | Metric | Value |
            |--------|-------|
            | Average Response Time | ${results.averageResponseTime}ms |
            | Total Requests | ${results.totalRequests} |
            | Success Rate | ${results.successRate}% |
            | Average Tokens/Request | ${results.averageTokens} |

            Benchmark completed successfully!`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: update-collections

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Generate static documentation
        run: |
          echo "Generating static documentation site..."
          node scripts/build-docs-site.js

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-site
          cname: your-domain.com  # Optional
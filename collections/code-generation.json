{
  "info": {
    "name": "Code Generation",
    "description": "Code generation, debugging, refactoring, and programming assistance using Gemini models",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Generate Code from Description",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are an expert software developer. Generate clean, well-documented, production-ready code. Follow best practices and include error handling where appropriate.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Create a Python function that implements a binary search algorithm. The function should accept a sorted list and a target value, returning the index if found or -1 if not found. Include proper documentation and type hints.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.2,\n    \"topK\": 20,\n    \"topP\": 0.8,\n    \"maxOutputTokens\": 2048\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Generate complete code implementations from natural language descriptions. Low temperature for consistent, reliable code generation."
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Code generation response contains code', function () {",
              "    const response = pm.response.json();",
              "    const generatedText = response.candidates[0].content.parts[0].text;",
              "    ",
              "    // Check for code indicators",
              "    pm.expect(generatedText).to.match(/(def |function |class |```)/);",
              "    pm.expect(generatedText.length).to.be.above(100);",
              "});",
              "",
              "pm.test('Response includes documentation', function () {",
              "    const response = pm.response.json();",
              "    const generatedText = response.candidates[0].content.parts[0].text;",
              "    ",
              "    // Check for documentation patterns",
              "    pm.expect(generatedText).to.match(/(\\\"\\\"\\\"|#|\\/\\*|\\*\\*)/);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Code Review and Optimization",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a senior code reviewer. Analyze code for bugs, performance issues, security vulnerabilities, and best practices. Provide specific, actionable feedback.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Review this JavaScript code and suggest improvements:\\n\\n```javascript\\nfunction processUsers(users) {\\n  var result = [];\\n  for (var i = 0; i < users.length; i++) {\\n    if (users[i].age > 18) {\\n      result.push({\\n        name: users[i].name.toUpperCase(),\\n        email: users[i].email\\n      });\\n    }\\n  }\\n  return result;\\n}\\n```\\n\\nPlease identify potential issues and provide an optimized version.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.3,\n    \"topK\": 30,\n    \"topP\": 0.85,\n    \"maxOutputTokens\": 3072\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Professional code review with optimization suggestions. Analyzes existing code for improvements, bugs, and best practices."
      },
      "response": []
    },
    {
      "name": "Debug Code Issues",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a debugging expert. Analyze error messages and code to identify root causes and provide step-by-step solutions.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"I'm getting this error in my Python application:\\n\\nError: AttributeError: 'NoneType' object has no attribute 'split'\\n\\nHere's the relevant code:\\n\\n```python\\ndef parse_config(config_file):\\n    with open(config_file, 'r') as f:\\n        content = f.read()\\n    \\n    lines = content.split('\\\\n')\\n    config = {}\\n    \\n    for line in lines:\\n        if '=' in line:\\n            key, value = line.split('=')\\n            config[key.strip()] = value.strip()\\n    \\n    return config\\n\\nresult = parse_config('settings.txt')\\nname = result.get('name').split(',')[0]\\n```\\n\\nWhat's causing this error and how can I fix it?\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.1,\n    \"topK\": 10,\n    \"topP\": 0.7,\n    \"maxOutputTokens\": 2048\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Debug specific error messages and code issues. Very low temperature for precise, accurate debugging assistance."
      },
      "response": []
    },
    {
      "name": "Generate Unit Tests",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a test automation expert. Generate comprehensive unit tests that cover edge cases, error conditions, and normal operations. Use appropriate testing frameworks and follow testing best practices.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Generate comprehensive unit tests for this Python function using pytest:\\n\\n```python\\ndef calculate_discount(price, discount_percent, customer_type='regular'):\\n    if price <= 0:\\n        raise ValueError('Price must be positive')\\n    \\n    if discount_percent < 0 or discount_percent > 100:\\n        raise ValueError('Discount percent must be between 0 and 100')\\n    \\n    base_discount = price * (discount_percent / 100)\\n    \\n    if customer_type == 'premium':\\n        base_discount *= 1.1  # 10% additional discount\\n    elif customer_type == 'vip':\\n        base_discount *= 1.2  # 20% additional discount\\n    \\n    final_price = price - base_discount\\n    return max(0, final_price)\\n```\\n\\nPlease create tests that cover all scenarios including edge cases.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.3,\n    \"topK\": 25,\n    \"topP\": 0.8,\n    \"maxOutputTokens\": 3072\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Generate comprehensive unit tests for existing code. Covers edge cases, error conditions, and various test scenarios."
      },
      "response": []
    },
    {
      "name": "API Integration Code",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are an API integration specialist. Generate robust code for API integrations including error handling, retry logic, and proper authentication.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Create a Node.js class that integrates with a REST API. The class should:\\n\\n1. Handle authentication with API keys\\n2. Include retry logic for failed requests\\n3. Implement rate limiting\\n4. Provide methods for GET, POST, PUT, DELETE operations\\n5. Include proper error handling and logging\\n6. Support both JSON and form data\\n\\nUse axios for HTTP requests and include TypeScript types.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.4,\n    \"topK\": 35,\n    \"topP\": 0.9,\n    \"maxOutputTokens\": 4096\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Generate robust API integration code with proper error handling, authentication, and best practices."
      },
      "response": []
    },
    {
      "name": "Code Refactoring",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a refactoring expert. Improve code maintainability, readability, and performance while preserving functionality. Apply SOLID principles and design patterns where appropriate.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Refactor this legacy Java code to improve maintainability and apply modern best practices:\\n\\n```java\\npublic class OrderProcessor {\\n    public void processOrder(String orderData) {\\n        String[] parts = orderData.split(\\\",\\\");\\n        String customerId = parts[0];\\n        String productId = parts[1];\\n        int quantity = Integer.parseInt(parts[2]);\\n        double price = Double.parseDouble(parts[3]);\\n        \\n        // Validate customer\\n        if (customerId == null || customerId.length() < 3) {\\n            System.out.println(\\\"Invalid customer ID\\\");\\n            return;\\n        }\\n        \\n        // Check inventory\\n        if (quantity > 100) {\\n            System.out.println(\\\"Quantity too high\\\");\\n            return;\\n        }\\n        \\n        // Calculate total\\n        double total = quantity * price;\\n        if (total > 10000) {\\n            total = total * 0.9; // 10% discount\\n        }\\n        \\n        // Save to database\\n        System.out.println(\\\"Order saved: \\\" + customerId + \\\", \\\" + total);\\n    }\\n}\\n```\\n\\nPlease provide a refactored version with proper error handling, validation, and separation of concerns.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.5,\n    \"topK\": 40,\n    \"topP\": 0.9,\n    \"maxOutputTokens\": 4096\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Refactor legacy code to improve maintainability, apply design patterns, and follow modern best practices."
      },
      "response": []
    },
    {
      "name": "Code Documentation Generation",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"system_instruction\": {\n    \"parts\": [\n      {\n        \"text\": \"You are a technical documentation expert. Generate comprehensive, clear documentation for code including API docs, inline comments, and usage examples.\"\n      }\n    ]\n  },\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Generate comprehensive documentation for this Python class:\\n\\n```python\\nclass DataProcessor:\\n    def __init__(self, config_path):\\n        self.config = self._load_config(config_path)\\n        self.cache = {}\\n    \\n    def _load_config(self, path):\\n        with open(path, 'r') as f:\\n            return json.load(f)\\n    \\n    def process_data(self, data, transform_type='default'):\\n        cache_key = f\\\"{hash(str(data))}_{transform_type}\\\"\\n        \\n        if cache_key in self.cache:\\n            return self.cache[cache_key]\\n        \\n        if transform_type == 'normalize':\\n            result = [(x - min(data)) / (max(data) - min(data)) for x in data]\\n        elif transform_type == 'standardize':\\n            mean_val = sum(data) / len(data)\\n            std_val = (sum((x - mean_val) ** 2 for x in data) / len(data)) ** 0.5\\n            result = [(x - mean_val) / std_val for x in data]\\n        else:\\n            result = data\\n        \\n        self.cache[cache_key] = result\\n        return result\\n    \\n    def clear_cache(self):\\n        self.cache.clear()\\n```\\n\\nInclude docstrings, parameter descriptions, return values, examples, and any potential exceptions.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.3,\n    \"topK\": 30,\n    \"topP\": 0.85,\n    \"maxOutputTokens\": 3072\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/{{api_version}}/models/{{model_name}}:generateContent?key={{GEMINI_API_KEY}}",
          "host": ["{{base_url}}"],
          "path": ["{{api_version}}", "models", "{{model_name}}:generateContent"],
          "query": [
            {
              "key": "key",
              "value": "{{GEMINI_API_KEY}}"
            }
          ]
        },
        "description": "Generate comprehensive documentation for existing code including docstrings, parameter descriptions, and usage examples."
      },
      "response": []
    }
  ]
}